# source: http://localhost:4466
# timestamp: Sat Dec 08 2018 12:05:29 GMT+0100 (CET)

type ActionType {
  name: String!
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege!]
}

"""A connection to a list of items."""
type ActionTypeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [ActionTypeEdge]!
  aggregate: AggregateActionType!
}

input ActionTypeCreateInput {
  name: String!
  privileges: PrivilegeCreateManyWithoutActionTypesInput
}

input ActionTypeCreateManyWithoutPrivilegesInput {
  create: [ActionTypeCreateWithoutPrivilegesInput!]
}

input ActionTypeCreateWithoutPrivilegesInput {
  name: String!
}

"""An edge in a connection."""
type ActionTypeEdge {
  """The item at the end of the edge."""
  node: ActionType!

  """A cursor for use in pagination."""
  cursor: String!
}

enum ActionTypeOrderByInput {
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type ActionTypePreviousValues {
  name: String!
}

type ActionTypeSubscriptionPayload {
  mutation: MutationType!
  node: ActionType
  updatedFields: [String!]
  previousValues: ActionTypePreviousValues
}

input ActionTypeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionTypeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionTypeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionTypeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: ActionTypeWhereInput
}

input ActionTypeUpdateInput {
  name: String
  privileges: PrivilegeUpdateManyWithoutActionTypesInput
}

input ActionTypeUpdateManyWithoutPrivilegesInput {
  create: [ActionTypeCreateWithoutPrivilegesInput!]
}

input ActionTypeWhereInput {
  """Logical AND on all given filters."""
  AND: [ActionTypeWhereInput!]

  """Logical OR on all given filters."""
  OR: [ActionTypeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [ActionTypeWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  privileges_every: PrivilegeWhereInput
  privileges_some: PrivilegeWhereInput
  privileges_none: PrivilegeWhereInput
}

type AggregateActionType {
  count: Int!
}

type AggregateEntity {
  count: Int!
}

type AggregateGroup {
  count: Int!
}

type AggregatePrivilege {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type Entity {
  name: String!
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege!]
}

"""A connection to a list of items."""
type EntityConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [EntityEdge]!
  aggregate: AggregateEntity!
}

input EntityCreateInput {
  name: String!
  privileges: PrivilegeCreateManyWithoutEntityInput
}

input EntityCreateOneWithoutPrivilegesInput {
  create: EntityCreateWithoutPrivilegesInput
}

input EntityCreateWithoutPrivilegesInput {
  name: String!
}

"""An edge in a connection."""
type EntityEdge {
  """The item at the end of the edge."""
  node: Entity!

  """A cursor for use in pagination."""
  cursor: String!
}

enum EntityOrderByInput {
  name_ASC
  name_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type EntityPreviousValues {
  name: String!
}

type EntitySubscriptionPayload {
  mutation: MutationType!
  node: Entity
  updatedFields: [String!]
  previousValues: EntityPreviousValues
}

input EntitySubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [EntitySubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntitySubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntitySubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: EntityWhereInput
}

input EntityUpdateInput {
  name: String
  privileges: PrivilegeUpdateManyWithoutEntityInput
}

input EntityUpdateOneRequiredWithoutPrivilegesInput {
  create: EntityCreateWithoutPrivilegesInput
  update: EntityUpdateWithoutPrivilegesDataInput
  upsert: EntityUpsertWithoutPrivilegesInput
}

input EntityUpdateWithoutPrivilegesDataInput {
  name: String
}

input EntityUpsertWithoutPrivilegesInput {
  update: EntityUpdateWithoutPrivilegesDataInput!
  create: EntityCreateWithoutPrivilegesInput!
}

input EntityWhereInput {
  """Logical AND on all given filters."""
  AND: [EntityWhereInput!]

  """Logical OR on all given filters."""
  OR: [EntityWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [EntityWhereInput!]
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  privileges_every: PrivilegeWhereInput
  privileges_some: PrivilegeWhereInput
  privileges_none: PrivilegeWhereInput
}

type Group implements Node {
  id: ID!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege!]
}

"""A connection to a list of items."""
type GroupConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GroupEdge]!
  aggregate: AggregateGroup!
}

input GroupCreateInput {
  name: String!
  users: UserCreateManyWithoutGroupsInput
  privileges: PrivilegeCreateManyWithoutGroupsInput
}

input GroupCreateManyWithoutPrivilegesInput {
  create: [GroupCreateWithoutPrivilegesInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
}

input GroupCreateWithoutPrivilegesInput {
  name: String!
  users: UserCreateManyWithoutGroupsInput
}

input GroupCreateWithoutUsersInput {
  name: String!
  privileges: PrivilegeCreateManyWithoutGroupsInput
}

"""An edge in a connection."""
type GroupEdge {
  """The item at the end of the edge."""
  node: Group!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GroupOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GroupPreviousValues {
  id: ID!
  name: String!
}

type GroupSubscriptionPayload {
  mutation: MutationType!
  node: Group
  updatedFields: [String!]
  previousValues: GroupPreviousValues
}

input GroupSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GroupWhereInput
}

input GroupUpdateInput {
  name: String
  users: UserUpdateManyWithoutGroupsInput
  privileges: PrivilegeUpdateManyWithoutGroupsInput
}

input GroupUpdateManyWithoutPrivilegesInput {
  create: [GroupCreateWithoutPrivilegesInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutPrivilegesInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutPrivilegesInput!]
}

input GroupUpdateManyWithoutUsersInput {
  create: [GroupCreateWithoutUsersInput!]
  connect: [GroupWhereUniqueInput!]
  disconnect: [GroupWhereUniqueInput!]
  delete: [GroupWhereUniqueInput!]
  update: [GroupUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [GroupUpsertWithWhereUniqueWithoutUsersInput!]
}

input GroupUpdateWithoutPrivilegesDataInput {
  name: String
  users: UserUpdateManyWithoutGroupsInput
}

input GroupUpdateWithoutUsersDataInput {
  name: String
  privileges: PrivilegeUpdateManyWithoutGroupsInput
}

input GroupUpdateWithWhereUniqueWithoutPrivilegesInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutPrivilegesDataInput!
}

input GroupUpdateWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput!
  data: GroupUpdateWithoutUsersDataInput!
}

input GroupUpsertWithWhereUniqueWithoutPrivilegesInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutPrivilegesDataInput!
  create: GroupCreateWithoutPrivilegesInput!
}

input GroupUpsertWithWhereUniqueWithoutUsersInput {
  where: GroupWhereUniqueInput!
  update: GroupUpdateWithoutUsersDataInput!
  create: GroupCreateWithoutUsersInput!
}

input GroupWhereInput {
  """Logical AND on all given filters."""
  AND: [GroupWhereInput!]

  """Logical OR on all given filters."""
  OR: [GroupWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GroupWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  privileges_every: PrivilegeWhereInput
  privileges_some: PrivilegeWhereInput
  privileges_none: PrivilegeWhereInput
}

input GroupWhereUniqueInput {
  id: ID
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPrivilege(data: PrivilegeCreateInput!): Privilege!
  createEntity(data: EntityCreateInput!): Entity!
  createGroup(data: GroupCreateInput!): Group!
  createActionType(data: ActionTypeCreateInput!): ActionType!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePrivilege(data: PrivilegeUpdateInput!, where: PrivilegeWhereUniqueInput!): Privilege
  updateGroup(data: GroupUpdateInput!, where: GroupWhereUniqueInput!): Group
  deleteUser(where: UserWhereUniqueInput!): User
  deletePrivilege(where: PrivilegeWhereUniqueInput!): Privilege
  deleteGroup(where: GroupWhereUniqueInput!): Group
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPrivilege(where: PrivilegeWhereUniqueInput!, create: PrivilegeCreateInput!, update: PrivilegeUpdateInput!): Privilege!
  upsertGroup(where: GroupWhereUniqueInput!, create: GroupCreateInput!, update: GroupUpdateInput!): Group!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPrivileges(data: PrivilegeUpdateInput!, where: PrivilegeWhereInput): BatchPayload!
  updateManyEntities(data: EntityUpdateInput!, where: EntityWhereInput): BatchPayload!
  updateManyGroups(data: GroupUpdateInput!, where: GroupWhereInput): BatchPayload!
  updateManyActionTypes(data: ActionTypeUpdateInput!, where: ActionTypeWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPrivileges(where: PrivilegeWhereInput): BatchPayload!
  deleteManyEntities(where: EntityWhereInput): BatchPayload!
  deleteManyGroups(where: GroupWhereInput): BatchPayload!
  deleteManyActionTypes(where: ActionTypeWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Privilege implements Node {
  id: ID!
  name: String!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  actionTypes(where: ActionTypeWhereInput, orderBy: ActionTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionType!]
  entity(where: EntityWhereInput): Entity!
}

"""A connection to a list of items."""
type PrivilegeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PrivilegeEdge]!
  aggregate: AggregatePrivilege!
}

input PrivilegeCreateInput {
  name: String!
  groups: GroupCreateManyWithoutPrivilegesInput
  users: UserCreateManyWithoutPrivilegesInput
  actionTypes: ActionTypeCreateManyWithoutPrivilegesInput
  entity: EntityCreateOneWithoutPrivilegesInput!
}

input PrivilegeCreateManyWithoutActionTypesInput {
  create: [PrivilegeCreateWithoutActionTypesInput!]
  connect: [PrivilegeWhereUniqueInput!]
}

input PrivilegeCreateManyWithoutEntityInput {
  create: [PrivilegeCreateWithoutEntityInput!]
  connect: [PrivilegeWhereUniqueInput!]
}

input PrivilegeCreateManyWithoutGroupsInput {
  create: [PrivilegeCreateWithoutGroupsInput!]
  connect: [PrivilegeWhereUniqueInput!]
}

input PrivilegeCreateManyWithoutUsersInput {
  create: [PrivilegeCreateWithoutUsersInput!]
  connect: [PrivilegeWhereUniqueInput!]
}

input PrivilegeCreateWithoutActionTypesInput {
  name: String!
  groups: GroupCreateManyWithoutPrivilegesInput
  users: UserCreateManyWithoutPrivilegesInput
  entity: EntityCreateOneWithoutPrivilegesInput!
}

input PrivilegeCreateWithoutEntityInput {
  name: String!
  groups: GroupCreateManyWithoutPrivilegesInput
  users: UserCreateManyWithoutPrivilegesInput
  actionTypes: ActionTypeCreateManyWithoutPrivilegesInput
}

input PrivilegeCreateWithoutGroupsInput {
  name: String!
  users: UserCreateManyWithoutPrivilegesInput
  actionTypes: ActionTypeCreateManyWithoutPrivilegesInput
  entity: EntityCreateOneWithoutPrivilegesInput!
}

input PrivilegeCreateWithoutUsersInput {
  name: String!
  groups: GroupCreateManyWithoutPrivilegesInput
  actionTypes: ActionTypeCreateManyWithoutPrivilegesInput
  entity: EntityCreateOneWithoutPrivilegesInput!
}

"""An edge in a connection."""
type PrivilegeEdge {
  """The item at the end of the edge."""
  node: Privilege!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PrivilegeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PrivilegePreviousValues {
  id: ID!
  name: String!
}

type PrivilegeSubscriptionPayload {
  mutation: MutationType!
  node: Privilege
  updatedFields: [String!]
  previousValues: PrivilegePreviousValues
}

input PrivilegeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PrivilegeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PrivilegeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PrivilegeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PrivilegeWhereInput
}

input PrivilegeUpdateInput {
  name: String
  groups: GroupUpdateManyWithoutPrivilegesInput
  users: UserUpdateManyWithoutPrivilegesInput
  actionTypes: ActionTypeUpdateManyWithoutPrivilegesInput
  entity: EntityUpdateOneRequiredWithoutPrivilegesInput
}

input PrivilegeUpdateManyWithoutActionTypesInput {
  create: [PrivilegeCreateWithoutActionTypesInput!]
  connect: [PrivilegeWhereUniqueInput!]
  disconnect: [PrivilegeWhereUniqueInput!]
  delete: [PrivilegeWhereUniqueInput!]
  update: [PrivilegeUpdateWithWhereUniqueWithoutActionTypesInput!]
  upsert: [PrivilegeUpsertWithWhereUniqueWithoutActionTypesInput!]
}

input PrivilegeUpdateManyWithoutEntityInput {
  create: [PrivilegeCreateWithoutEntityInput!]
  connect: [PrivilegeWhereUniqueInput!]
  disconnect: [PrivilegeWhereUniqueInput!]
  delete: [PrivilegeWhereUniqueInput!]
  update: [PrivilegeUpdateWithWhereUniqueWithoutEntityInput!]
  upsert: [PrivilegeUpsertWithWhereUniqueWithoutEntityInput!]
}

input PrivilegeUpdateManyWithoutGroupsInput {
  create: [PrivilegeCreateWithoutGroupsInput!]
  connect: [PrivilegeWhereUniqueInput!]
  disconnect: [PrivilegeWhereUniqueInput!]
  delete: [PrivilegeWhereUniqueInput!]
  update: [PrivilegeUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [PrivilegeUpsertWithWhereUniqueWithoutGroupsInput!]
}

input PrivilegeUpdateManyWithoutUsersInput {
  create: [PrivilegeCreateWithoutUsersInput!]
  connect: [PrivilegeWhereUniqueInput!]
  disconnect: [PrivilegeWhereUniqueInput!]
  delete: [PrivilegeWhereUniqueInput!]
  update: [PrivilegeUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [PrivilegeUpsertWithWhereUniqueWithoutUsersInput!]
}

input PrivilegeUpdateWithoutActionTypesDataInput {
  name: String
  groups: GroupUpdateManyWithoutPrivilegesInput
  users: UserUpdateManyWithoutPrivilegesInput
  entity: EntityUpdateOneRequiredWithoutPrivilegesInput
}

input PrivilegeUpdateWithoutEntityDataInput {
  name: String
  groups: GroupUpdateManyWithoutPrivilegesInput
  users: UserUpdateManyWithoutPrivilegesInput
  actionTypes: ActionTypeUpdateManyWithoutPrivilegesInput
}

input PrivilegeUpdateWithoutGroupsDataInput {
  name: String
  users: UserUpdateManyWithoutPrivilegesInput
  actionTypes: ActionTypeUpdateManyWithoutPrivilegesInput
  entity: EntityUpdateOneRequiredWithoutPrivilegesInput
}

input PrivilegeUpdateWithoutUsersDataInput {
  name: String
  groups: GroupUpdateManyWithoutPrivilegesInput
  actionTypes: ActionTypeUpdateManyWithoutPrivilegesInput
  entity: EntityUpdateOneRequiredWithoutPrivilegesInput
}

input PrivilegeUpdateWithWhereUniqueWithoutActionTypesInput {
  where: PrivilegeWhereUniqueInput!
  data: PrivilegeUpdateWithoutActionTypesDataInput!
}

input PrivilegeUpdateWithWhereUniqueWithoutEntityInput {
  where: PrivilegeWhereUniqueInput!
  data: PrivilegeUpdateWithoutEntityDataInput!
}

input PrivilegeUpdateWithWhereUniqueWithoutGroupsInput {
  where: PrivilegeWhereUniqueInput!
  data: PrivilegeUpdateWithoutGroupsDataInput!
}

input PrivilegeUpdateWithWhereUniqueWithoutUsersInput {
  where: PrivilegeWhereUniqueInput!
  data: PrivilegeUpdateWithoutUsersDataInput!
}

input PrivilegeUpsertWithWhereUniqueWithoutActionTypesInput {
  where: PrivilegeWhereUniqueInput!
  update: PrivilegeUpdateWithoutActionTypesDataInput!
  create: PrivilegeCreateWithoutActionTypesInput!
}

input PrivilegeUpsertWithWhereUniqueWithoutEntityInput {
  where: PrivilegeWhereUniqueInput!
  update: PrivilegeUpdateWithoutEntityDataInput!
  create: PrivilegeCreateWithoutEntityInput!
}

input PrivilegeUpsertWithWhereUniqueWithoutGroupsInput {
  where: PrivilegeWhereUniqueInput!
  update: PrivilegeUpdateWithoutGroupsDataInput!
  create: PrivilegeCreateWithoutGroupsInput!
}

input PrivilegeUpsertWithWhereUniqueWithoutUsersInput {
  where: PrivilegeWhereUniqueInput!
  update: PrivilegeUpdateWithoutUsersDataInput!
  create: PrivilegeCreateWithoutUsersInput!
}

input PrivilegeWhereInput {
  """Logical AND on all given filters."""
  AND: [PrivilegeWhereInput!]

  """Logical OR on all given filters."""
  OR: [PrivilegeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PrivilegeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  actionTypes_every: ActionTypeWhereInput
  actionTypes_some: ActionTypeWhereInput
  actionTypes_none: ActionTypeWhereInput
  entity: EntityWhereInput
}

input PrivilegeWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege]!
  entities(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Entity]!
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group]!
  actionTypes(where: ActionTypeWhereInput, orderBy: ActionTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [ActionType]!
  user(where: UserWhereUniqueInput!): User
  privilege(where: PrivilegeWhereUniqueInput!): Privilege
  group(where: GroupWhereUniqueInput!): Group
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  privilegesConnection(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PrivilegeConnection!
  entitiesConnection(where: EntityWhereInput, orderBy: EntityOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): EntityConnection!
  groupsConnection(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GroupConnection!
  actionTypesConnection(where: ActionTypeWhereInput, orderBy: ActionTypeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): ActionTypeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  privilege(where: PrivilegeSubscriptionWhereInput): PrivilegeSubscriptionPayload
  entity(where: EntitySubscriptionWhereInput): EntitySubscriptionPayload
  group(where: GroupSubscriptionWhereInput): GroupSubscriptionPayload
  actionType(where: ActionTypeSubscriptionWhereInput): ActionTypeSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege!]
  groups(where: GroupWhereInput, orderBy: GroupOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Group!]
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateInput {
  name: String!
  privileges: PrivilegeCreateManyWithoutUsersInput
  groups: GroupCreateManyWithoutUsersInput
}

input UserCreateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateManyWithoutPrivilegesInput {
  create: [UserCreateWithoutPrivilegesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutGroupsInput {
  name: String!
  privileges: PrivilegeCreateManyWithoutUsersInput
}

input UserCreateWithoutPrivilegesInput {
  name: String!
  groups: GroupCreateManyWithoutUsersInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateInput {
  name: String
  privileges: PrivilegeUpdateManyWithoutUsersInput
  groups: GroupUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutGroupsInput {
  create: [UserCreateWithoutGroupsInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutGroupsInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutGroupsInput!]
}

input UserUpdateManyWithoutPrivilegesInput {
  create: [UserCreateWithoutPrivilegesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPrivilegesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPrivilegesInput!]
}

input UserUpdateWithoutGroupsDataInput {
  name: String
  privileges: PrivilegeUpdateManyWithoutUsersInput
}

input UserUpdateWithoutPrivilegesDataInput {
  name: String
  groups: GroupUpdateManyWithoutUsersInput
}

input UserUpdateWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutGroupsDataInput!
}

input UserUpdateWithWhereUniqueWithoutPrivilegesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPrivilegesDataInput!
}

input UserUpsertWithWhereUniqueWithoutGroupsInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutGroupsDataInput!
  create: UserCreateWithoutGroupsInput!
}

input UserUpsertWithWhereUniqueWithoutPrivilegesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPrivilegesDataInput!
  create: UserCreateWithoutPrivilegesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  privileges_every: PrivilegeWhereInput
  privileges_some: PrivilegeWhereInput
  privileges_none: PrivilegeWhereInput
  groups_every: GroupWhereInput
  groups_some: GroupWhereInput
  groups_none: GroupWhereInput
}

input UserWhereUniqueInput {
  id: ID
}
