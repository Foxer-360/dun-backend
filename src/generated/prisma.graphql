# source: http://localhost:4466
# timestamp: Wed Dec 19 2018 17:46:08 GMT+0100 (CET)

type AggregatePrivilege {
  count: Int!
}

type AggregateUser {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

"""Raw JSON value"""
scalar Json

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createUser(data: UserCreateInput!): User!
  createPrivilege(data: PrivilegeCreateInput!): Privilege!
  updateUser(data: UserUpdateInput!, where: UserWhereUniqueInput!): User
  updatePrivilege(data: PrivilegeUpdateInput!, where: PrivilegeWhereUniqueInput!): Privilege
  deleteUser(where: UserWhereUniqueInput!): User
  deletePrivilege(where: PrivilegeWhereUniqueInput!): Privilege
  upsertUser(where: UserWhereUniqueInput!, create: UserCreateInput!, update: UserUpdateInput!): User!
  upsertPrivilege(where: PrivilegeWhereUniqueInput!, create: PrivilegeCreateInput!, update: PrivilegeUpdateInput!): Privilege!
  updateManyUsers(data: UserUpdateInput!, where: UserWhereInput): BatchPayload!
  updateManyPrivileges(data: PrivilegeUpdateInput!, where: PrivilegeWhereInput): BatchPayload!
  deleteManyUsers(where: UserWhereInput): BatchPayload!
  deleteManyPrivileges(where: PrivilegeWhereInput): BatchPayload!
  executeRaw(database: PrismaDatabase, query: String!): Json!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

enum PrismaDatabase {
  default
}

type Privilege implements Node {
  id: ID!
  name: String!
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User!]
  actionTypes: [String!]!
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege!]
  parent(where: PrivilegeWhereInput): Privilege
}

"""A connection to a list of items."""
type PrivilegeConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PrivilegeEdge]!
  aggregate: AggregatePrivilege!
}

input PrivilegeCreateactionTypesInput {
  set: [String!]
}

input PrivilegeCreateInput {
  name: String!
  actionTypes: PrivilegeCreateactionTypesInput
  users: UserCreateManyWithoutPrivilegesInput
  privileges: PrivilegeCreateManyWithoutParentInput
  parent: PrivilegeCreateOneWithoutPrivilegesInput
}

input PrivilegeCreateManyWithoutParentInput {
  create: [PrivilegeCreateWithoutParentInput!]
  connect: [PrivilegeWhereUniqueInput!]
}

input PrivilegeCreateManyWithoutUsersInput {
  create: [PrivilegeCreateWithoutUsersInput!]
  connect: [PrivilegeWhereUniqueInput!]
}

input PrivilegeCreateOneWithoutPrivilegesInput {
  create: PrivilegeCreateWithoutPrivilegesInput
  connect: PrivilegeWhereUniqueInput
}

input PrivilegeCreateWithoutParentInput {
  name: String!
  actionTypes: PrivilegeCreateactionTypesInput
  users: UserCreateManyWithoutPrivilegesInput
  privileges: PrivilegeCreateManyWithoutParentInput
}

input PrivilegeCreateWithoutPrivilegesInput {
  name: String!
  actionTypes: PrivilegeCreateactionTypesInput
  users: UserCreateManyWithoutPrivilegesInput
  parent: PrivilegeCreateOneWithoutPrivilegesInput
}

input PrivilegeCreateWithoutUsersInput {
  name: String!
  actionTypes: PrivilegeCreateactionTypesInput
  privileges: PrivilegeCreateManyWithoutParentInput
  parent: PrivilegeCreateOneWithoutPrivilegesInput
}

"""An edge in a connection."""
type PrivilegeEdge {
  """The item at the end of the edge."""
  node: Privilege!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PrivilegeOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PrivilegePreviousValues {
  id: ID!
  name: String!
  actionTypes: [String!]!
}

type PrivilegeSubscriptionPayload {
  mutation: MutationType!
  node: Privilege
  updatedFields: [String!]
  previousValues: PrivilegePreviousValues
}

input PrivilegeSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PrivilegeSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PrivilegeSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PrivilegeSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PrivilegeWhereInput
}

input PrivilegeUpdateactionTypesInput {
  set: [String!]
}

input PrivilegeUpdateInput {
  name: String
  actionTypes: PrivilegeUpdateactionTypesInput
  users: UserUpdateManyWithoutPrivilegesInput
  privileges: PrivilegeUpdateManyWithoutParentInput
  parent: PrivilegeUpdateOneWithoutPrivilegesInput
}

input PrivilegeUpdateManyWithoutParentInput {
  create: [PrivilegeCreateWithoutParentInput!]
  connect: [PrivilegeWhereUniqueInput!]
  disconnect: [PrivilegeWhereUniqueInput!]
  delete: [PrivilegeWhereUniqueInput!]
  update: [PrivilegeUpdateWithWhereUniqueWithoutParentInput!]
  upsert: [PrivilegeUpsertWithWhereUniqueWithoutParentInput!]
}

input PrivilegeUpdateManyWithoutUsersInput {
  create: [PrivilegeCreateWithoutUsersInput!]
  connect: [PrivilegeWhereUniqueInput!]
  disconnect: [PrivilegeWhereUniqueInput!]
  delete: [PrivilegeWhereUniqueInput!]
  update: [PrivilegeUpdateWithWhereUniqueWithoutUsersInput!]
  upsert: [PrivilegeUpsertWithWhereUniqueWithoutUsersInput!]
}

input PrivilegeUpdateOneWithoutPrivilegesInput {
  create: PrivilegeCreateWithoutPrivilegesInput
  connect: PrivilegeWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: PrivilegeUpdateWithoutPrivilegesDataInput
  upsert: PrivilegeUpsertWithoutPrivilegesInput
}

input PrivilegeUpdateWithoutParentDataInput {
  name: String
  actionTypes: PrivilegeUpdateactionTypesInput
  users: UserUpdateManyWithoutPrivilegesInput
  privileges: PrivilegeUpdateManyWithoutParentInput
}

input PrivilegeUpdateWithoutPrivilegesDataInput {
  name: String
  actionTypes: PrivilegeUpdateactionTypesInput
  users: UserUpdateManyWithoutPrivilegesInput
  parent: PrivilegeUpdateOneWithoutPrivilegesInput
}

input PrivilegeUpdateWithoutUsersDataInput {
  name: String
  actionTypes: PrivilegeUpdateactionTypesInput
  privileges: PrivilegeUpdateManyWithoutParentInput
  parent: PrivilegeUpdateOneWithoutPrivilegesInput
}

input PrivilegeUpdateWithWhereUniqueWithoutParentInput {
  where: PrivilegeWhereUniqueInput!
  data: PrivilegeUpdateWithoutParentDataInput!
}

input PrivilegeUpdateWithWhereUniqueWithoutUsersInput {
  where: PrivilegeWhereUniqueInput!
  data: PrivilegeUpdateWithoutUsersDataInput!
}

input PrivilegeUpsertWithoutPrivilegesInput {
  update: PrivilegeUpdateWithoutPrivilegesDataInput!
  create: PrivilegeCreateWithoutPrivilegesInput!
}

input PrivilegeUpsertWithWhereUniqueWithoutParentInput {
  where: PrivilegeWhereUniqueInput!
  update: PrivilegeUpdateWithoutParentDataInput!
  create: PrivilegeCreateWithoutParentInput!
}

input PrivilegeUpsertWithWhereUniqueWithoutUsersInput {
  where: PrivilegeWhereUniqueInput!
  update: PrivilegeUpdateWithoutUsersDataInput!
  create: PrivilegeCreateWithoutUsersInput!
}

input PrivilegeWhereInput {
  """Logical AND on all given filters."""
  AND: [PrivilegeWhereInput!]

  """Logical OR on all given filters."""
  OR: [PrivilegeWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PrivilegeWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  users_every: UserWhereInput
  users_some: UserWhereInput
  users_none: UserWhereInput
  privileges_every: PrivilegeWhereInput
  privileges_some: PrivilegeWhereInput
  privileges_none: PrivilegeWhereInput
  parent: PrivilegeWhereInput
}

input PrivilegeWhereUniqueInput {
  id: ID
}

type Query {
  users(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [User]!
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege]!
  user(where: UserWhereUniqueInput!): User
  privilege(where: PrivilegeWhereUniqueInput!): Privilege
  usersConnection(where: UserWhereInput, orderBy: UserOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): UserConnection!
  privilegesConnection(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PrivilegeConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type Subscription {
  user(where: UserSubscriptionWhereInput): UserSubscriptionPayload
  privilege(where: PrivilegeSubscriptionWhereInput): PrivilegeSubscriptionPayload
}

type User implements Node {
  id: ID!
  name: String!
  privileges(where: PrivilegeWhereInput, orderBy: PrivilegeOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Privilege!]
  actionTypes: [String!]!
  identity: String!
  auth0id: ID!
  email: String!
  avatar: String!
}

"""A connection to a list of items."""
type UserConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [UserEdge]!
  aggregate: AggregateUser!
}

input UserCreateactionTypesInput {
  set: [String!]
}

input UserCreateInput {
  name: String!
  identity: String!
  auth0id: ID!
  email: String!
  avatar: String!
  actionTypes: UserCreateactionTypesInput
  privileges: PrivilegeCreateManyWithoutUsersInput
}

input UserCreateManyWithoutPrivilegesInput {
  create: [UserCreateWithoutPrivilegesInput!]
  connect: [UserWhereUniqueInput!]
}

input UserCreateWithoutPrivilegesInput {
  name: String!
  identity: String!
  auth0id: ID!
  email: String!
  avatar: String!
  actionTypes: UserCreateactionTypesInput
}

"""An edge in a connection."""
type UserEdge {
  """The item at the end of the edge."""
  node: User!

  """A cursor for use in pagination."""
  cursor: String!
}

enum UserOrderByInput {
  id_ASC
  id_DESC
  name_ASC
  name_DESC
  identity_ASC
  identity_DESC
  auth0id_ASC
  auth0id_DESC
  email_ASC
  email_DESC
  avatar_ASC
  avatar_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type UserPreviousValues {
  id: ID!
  name: String!
  actionTypes: [String!]!
  identity: String!
  auth0id: ID!
  email: String!
  avatar: String!
}

type UserSubscriptionPayload {
  mutation: MutationType!
  node: User
  updatedFields: [String!]
  previousValues: UserPreviousValues
}

input UserSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [UserSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: UserWhereInput
}

input UserUpdateactionTypesInput {
  set: [String!]
}

input UserUpdateInput {
  name: String
  identity: String
  auth0id: ID
  email: String
  avatar: String
  actionTypes: UserUpdateactionTypesInput
  privileges: PrivilegeUpdateManyWithoutUsersInput
}

input UserUpdateManyWithoutPrivilegesInput {
  create: [UserCreateWithoutPrivilegesInput!]
  connect: [UserWhereUniqueInput!]
  disconnect: [UserWhereUniqueInput!]
  delete: [UserWhereUniqueInput!]
  update: [UserUpdateWithWhereUniqueWithoutPrivilegesInput!]
  upsert: [UserUpsertWithWhereUniqueWithoutPrivilegesInput!]
}

input UserUpdateWithoutPrivilegesDataInput {
  name: String
  identity: String
  auth0id: ID
  email: String
  avatar: String
  actionTypes: UserUpdateactionTypesInput
}

input UserUpdateWithWhereUniqueWithoutPrivilegesInput {
  where: UserWhereUniqueInput!
  data: UserUpdateWithoutPrivilegesDataInput!
}

input UserUpsertWithWhereUniqueWithoutPrivilegesInput {
  where: UserWhereUniqueInput!
  update: UserUpdateWithoutPrivilegesDataInput!
  create: UserCreateWithoutPrivilegesInput!
}

input UserWhereInput {
  """Logical AND on all given filters."""
  AND: [UserWhereInput!]

  """Logical OR on all given filters."""
  OR: [UserWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [UserWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  name: String

  """All values that are not equal to given value."""
  name_not: String

  """All values that are contained in given list."""
  name_in: [String!]

  """All values that are not contained in given list."""
  name_not_in: [String!]

  """All values less than the given value."""
  name_lt: String

  """All values less than or equal the given value."""
  name_lte: String

  """All values greater than the given value."""
  name_gt: String

  """All values greater than or equal the given value."""
  name_gte: String

  """All values containing the given string."""
  name_contains: String

  """All values not containing the given string."""
  name_not_contains: String

  """All values starting with the given string."""
  name_starts_with: String

  """All values not starting with the given string."""
  name_not_starts_with: String

  """All values ending with the given string."""
  name_ends_with: String

  """All values not ending with the given string."""
  name_not_ends_with: String
  identity: String

  """All values that are not equal to given value."""
  identity_not: String

  """All values that are contained in given list."""
  identity_in: [String!]

  """All values that are not contained in given list."""
  identity_not_in: [String!]

  """All values less than the given value."""
  identity_lt: String

  """All values less than or equal the given value."""
  identity_lte: String

  """All values greater than the given value."""
  identity_gt: String

  """All values greater than or equal the given value."""
  identity_gte: String

  """All values containing the given string."""
  identity_contains: String

  """All values not containing the given string."""
  identity_not_contains: String

  """All values starting with the given string."""
  identity_starts_with: String

  """All values not starting with the given string."""
  identity_not_starts_with: String

  """All values ending with the given string."""
  identity_ends_with: String

  """All values not ending with the given string."""
  identity_not_ends_with: String
  auth0id: ID

  """All values that are not equal to given value."""
  auth0id_not: ID

  """All values that are contained in given list."""
  auth0id_in: [ID!]

  """All values that are not contained in given list."""
  auth0id_not_in: [ID!]

  """All values less than the given value."""
  auth0id_lt: ID

  """All values less than or equal the given value."""
  auth0id_lte: ID

  """All values greater than the given value."""
  auth0id_gt: ID

  """All values greater than or equal the given value."""
  auth0id_gte: ID

  """All values containing the given string."""
  auth0id_contains: ID

  """All values not containing the given string."""
  auth0id_not_contains: ID

  """All values starting with the given string."""
  auth0id_starts_with: ID

  """All values not starting with the given string."""
  auth0id_not_starts_with: ID

  """All values ending with the given string."""
  auth0id_ends_with: ID

  """All values not ending with the given string."""
  auth0id_not_ends_with: ID
  email: String

  """All values that are not equal to given value."""
  email_not: String

  """All values that are contained in given list."""
  email_in: [String!]

  """All values that are not contained in given list."""
  email_not_in: [String!]

  """All values less than the given value."""
  email_lt: String

  """All values less than or equal the given value."""
  email_lte: String

  """All values greater than the given value."""
  email_gt: String

  """All values greater than or equal the given value."""
  email_gte: String

  """All values containing the given string."""
  email_contains: String

  """All values not containing the given string."""
  email_not_contains: String

  """All values starting with the given string."""
  email_starts_with: String

  """All values not starting with the given string."""
  email_not_starts_with: String

  """All values ending with the given string."""
  email_ends_with: String

  """All values not ending with the given string."""
  email_not_ends_with: String
  avatar: String

  """All values that are not equal to given value."""
  avatar_not: String

  """All values that are contained in given list."""
  avatar_in: [String!]

  """All values that are not contained in given list."""
  avatar_not_in: [String!]

  """All values less than the given value."""
  avatar_lt: String

  """All values less than or equal the given value."""
  avatar_lte: String

  """All values greater than the given value."""
  avatar_gt: String

  """All values greater than or equal the given value."""
  avatar_gte: String

  """All values containing the given string."""
  avatar_contains: String

  """All values not containing the given string."""
  avatar_not_contains: String

  """All values starting with the given string."""
  avatar_starts_with: String

  """All values not starting with the given string."""
  avatar_not_starts_with: String

  """All values ending with the given string."""
  avatar_ends_with: String

  """All values not ending with the given string."""
  avatar_not_ends_with: String
  privileges_every: PrivilegeWhereInput
  privileges_some: PrivilegeWhereInput
  privileges_none: PrivilegeWhereInput
}

input UserWhereUniqueInput {
  id: ID
  auth0id: ID
}
